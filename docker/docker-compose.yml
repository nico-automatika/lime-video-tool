version: '3.8'

services:
  # Aplicación Next.js
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile.app
    ports:
      - "3000:3000"
    env_file:
      - ../.env
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-videodb}
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    volumes:
      - ../docker-volumes/lime-video-tool/uploads:/app/uploads
      - ../docker-volumes/lime-video-tool/temp:/app/temp
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Worker para procesamiento de video
  worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile.worker
    env_file:
      - ../.env
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-videodb}
      - REDIS_URL=redis://redis:6379
      - CONCURRENT_JOBS=${CONCURRENT_JOBS:-3}
    depends_on:
      - postgres
      - redis
    volumes:
      - ../docker-volumes/lime-video-tool/uploads:/app/uploads
      - ../docker-volumes/lime-video-tool/temp:/app/temp
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '4'
          memory: 8G

  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-videodb}
    volumes:
      - ../docker-volumes/lime-video-tool/postgres:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    restart: unless-stopped

  # Redis para colas y caché
  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - ../docker-volumes/lime-video-tool/redis:/data
    restart: unless-stopped
    command: redis-server --maxmemory 2gb --maxmemory-policy allkeys-lru

  # Nginx como reverse proxy y load balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../ssl:/etc/nginx/ssl
    depends_on:
      - app
    restart: unless-stopped

  # MinIO para almacenamiento compatible con S3
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - ../docker-volumes/lime-video-tool/minio:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped

# Los volúmenes ahora son bind mounts en docker-volumes/lime-video-tool/
# No se necesitan volúmenes nombrados

